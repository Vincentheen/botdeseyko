"""
Bot Discord Unifi√© - Seykoofx
=============================

Ce bot combine toutes les fonctionnalit√©s :
- Syst√®me de tickets
- Gestion du r√®glement
- API pour int√©gration web
- V√©rification des r√¥les Discord
"""

import os
import discord
from discord.ext import commands
import requests
import json
from datetime import datetime, timedelta
import asyncio
from flask import Flask, request, jsonify
from flask_cors import CORS
import jwt
import secrets
from threading import Thread
import time

# Import des modules s√©par√©s
from tickets import (
    setup_ticket_system, 
    create_ticket_panel
)
from reglement import setup_reglement_system, create_reglement_panel
from verification import (
    setup_verification_system,
    create_verification_panel
)
from security import setup_security_system
from annonce import setup_announcement_system
from planning import (
    setup_planning_system,
    create_planning_panel
)
from logs import setup_logs_system
from moderation import setup_moderation_system

# =============================================================================
# CONFIGURATION
# =============================================================================

# Configuration Discord
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN', 'VOTRE_TOKEN_BOT')
DISCORD_GUILD_ID = '1005763703335034970'
REQUIRED_ROLE_ID = '1005763703335034975'
PREMIUM_ROLE_ID = '1400254347866144900'  # R√¥le premium pour d√©bloquer le contenu
API_SECRET_KEY = os.getenv('API_SECRET_KEY', '533d4a210d245708c0a1bae2db14036abeabc77b6faa457203a8758f5b2050d9')

# Configuration du bot Discord
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True

bot = commands.Bot(command_prefix='!', intents=intents)

# Configuration Flask API
app = Flask(__name__)
CORS(app, origins=['https://seykoofx-shop.vercel.app', 'http://localhost:3000', 'http://localhost:5000'], 
      methods=['GET', 'POST', 'OPTIONS'], 
      allow_headers=['Content-Type', 'Authorization'])

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def generate_token(user_id, username):
    """G√©n√®re un token JWT pour l'utilisateur"""
    payload = {
        'user_id': user_id,
        'username': username,
        'exp': datetime.utcnow() + timedelta(hours=24)
    }
    return jwt.encode(payload, API_SECRET_KEY, algorithm='HS256')

def verify_token(token):
    """V√©rifie un token JWT"""
    try:
        payload = jwt.decode(token, API_SECRET_KEY, algorithms=['HS256'])
        return payload
    except:
        return None

def discord_api_request(endpoint, method='GET', data=None):
    """Fait une requ√™te √† l'API Discord"""
    headers = {
        'Authorization': f'Bot {DISCORD_TOKEN}',
        'Content-Type': 'application/json'
    }
    
    url = f'https://discord.com/api/v10{endpoint}'
    
    if method == 'GET':
        response = requests.get(url, headers=headers)
    elif method == 'POST':
        response = requests.post(url, headers=headers, json=data)
    elif method == 'PUT':
        response = requests.put(url, headers=headers, json=data)
    elif method == 'DELETE':
        response = requests.delete(url, headers=headers)
    
    return response

def check_user_has_role(user_id, role_id):
    """V√©rifie si un utilisateur a un r√¥le sp√©cifique"""
    try:
        member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
        
        if member_response.status_code != 200:
            print(f"Erreur v√©rification membre {user_id}: {member_response.status_code}")
            return False
        
        member_data = member_response.json()
        user_roles = member_data.get('roles', [])
        
        # Debug: afficher les r√¥les de l'utilisateur
        print(f"R√¥les de l'utilisateur {user_id}: {user_roles}")
        print(f"R√¥le requis: {role_id}")
        
        has_role = role_id in user_roles
        print(f"L'utilisateur a le r√¥le requis: {has_role}")
        
        return has_role
        
    except Exception as e:
        print(f"Erreur lors de la v√©rification du r√¥le: {e}")
        return False

def check_user_has_access(user_id):
    """V√©rifie si un utilisateur a acc√®s au site (r√¥le membre OU premium)"""
    try:
        member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
        
        if member_response.status_code != 200:
            print(f"Erreur v√©rification membre {user_id}: {member_response.status_code}")
            return False
        
        member_data = member_response.json()
        user_roles = member_data.get('roles', [])
        
        # V√©rifier si l'utilisateur a le r√¥le membre OU premium
        has_member_role = REQUIRED_ROLE_ID in user_roles
        has_premium_role = PREMIUM_ROLE_ID in user_roles
        
        print(f"R√¥les de l'utilisateur {user_id}: {user_roles}")
        print(f"R√¥le membre ({REQUIRED_ROLE_ID}): {has_member_role}")
        print(f"R√¥le premium ({PREMIUM_ROLE_ID}): {has_premium_role}")
        
        has_access = has_member_role or has_premium_role
        print(f"L'utilisateur a acc√®s au site: {has_access}")
        
        return has_access
        
    except Exception as e:
        print(f"Erreur lors de la v√©rification d'acc√®s: {e}")
        return False

def check_user_premium_status(user_id):
    """V√©rifie si un utilisateur a le r√¥le premium"""
    return check_user_has_role(user_id, PREMIUM_ROLE_ID)

# =============================================================================
# √âV√âNEMENTS DISCORD
# =============================================================================

@bot.event
async def on_ready():
    """√âv√©nement quand le bot est pr√™t"""
    print(f"‚úÖ Bot connect√© en tant que {bot.user.name}")
    print(f"üÜî ID du bot: {bot.user.id}")
    print(f"üìä Nombre de serveurs: {len(bot.guilds)}")
    
    # V√©rifier la configuration
    if DISCORD_TOKEN == 'VOTRE_TOKEN_BOT':
        print("‚ö†Ô∏è  ATTENTION: DISCORD_TOKEN non configur√©!")
    
    # Afficher les serveurs
    for guild in bot.guilds:
        print(f"üì° Serveur: {guild.name} (ID: {guild.id})")
        if str(guild.id) == DISCORD_GUILD_ID:
            print(f"‚úÖ Serveur cible trouv√©: {guild.name}")
    
    # Configuration du syst√®me de tickets
    await setup_ticket_system(bot)
    
    # Configuration du syst√®me de v√©rification
    await setup_verification_system(bot)
    
    # Configuration du syst√®me de s√©curit√© extr√™me
    security_manager = setup_security_system(bot)
    print("üîí Syst√®me de s√©curit√© extr√™me activ√©")
    
    # Configuration du syst√®me d'annonces
    setup_announcement_system(bot)
    print("üì¢ Syst√®me d'annonces activ√©")
    
    # Configuration du syst√®me de planning
    await setup_planning_system(bot)
    print("üìÖ Syst√®me de planning activ√©")
    
    # Configuration du syst√®me de logs
    setup_logs_system(bot)
    print("üìä Syst√®me de logs activ√©")
    
    # Configuration du syst√®me de mod√©ration
    await setup_moderation_system(bot)
    print("üõ°Ô∏è Syst√®me de mod√©ration activ√©")
    
    # Nettoyer toutes les commandes slash existantes
    try:
        bot.tree.clear_commands(guild=None)
        await bot.tree.sync()
        print("üßπ Commandes slash nettoy√©es")
    except Exception as e:
        print(f"‚ùå Erreur nettoyage commandes slash: {e}")
    
    # Pas de commandes slash - uniquement les commandes avec !
    print("‚úÖ Syst√®me de commandes avec ! activ√©")
    
    # Attendre un peu pour s'assurer que le bot est compl√®tement connect√©
    await asyncio.sleep(3)
    
    # Envoyer les messages automatiques dans les channels
    await send_automatic_messages()
    
    print("üöÄ Bot unifi√© Seykoofx d√©marr√© avec succ√®s!")
    print("‚úÖ Tous les panels ont √©t√© cr√©√©s automatiquement!")

async def send_automatic_messages():
    """Envoie les messages automatiques dans les channels sp√©cifi√©s"""
    print("üöÄ D√©marrage de l'envoi automatique des messages...")
    
    try:
        guild = bot.get_guild(int(DISCORD_GUILD_ID))
        if not guild:
            print("‚ùå Serveur Discord non trouv√©")
            return
        
        print(f"üì° Serveur trouv√©: {guild.name}")
        
        # Channel Tickets - ID: 1399430693217505300
        print("üé´ Cr√©ation du panel de tickets...")
        ticket_channel = guild.get_channel(1399430693217505300)
        if ticket_channel:
            try:
                from tickets import create_ticket_panel
                await create_ticket_panel(bot, guild)
                print(f"‚úÖ Panel de tickets cr√©√© dans #{ticket_channel.name}")
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation panel tickets: {e}")
        else:
            print("‚ùå Canal de tickets introuvable (ID: 1399430693217505300)")
        
        # Channel R√®glement - ID: 1005763703750279183
        print("üìú Cr√©ation du panel de r√®glement...")
        reglement_channel = guild.get_channel(1005763703750279183)
        if reglement_channel:
            try:
                from reglement import create_reglement_panel
                await create_reglement_panel(bot, guild)
                print(f"‚úÖ Panel de r√®glement cr√©√© dans #{reglement_channel.name}")
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation panel r√®glement: {e}")
        else:
            print("‚ùå Canal de r√®glement introuvable (ID: 1005763703750279183)")
        
        # Channel V√©rification - ID: 1400139457675661412
        print("üîê Cr√©ation du panel de v√©rification...")
        verification_channel = guild.get_channel(1400139457675661412)
        if verification_channel:
            try:
                from verification import create_verification_panel
                await create_verification_panel(bot, guild)
                print(f"‚úÖ Panel de v√©rification cr√©√© dans #{verification_channel.name}")
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation panel v√©rification: {e}")
        else:
            print("‚ùå Canal de v√©rification introuvable (ID: 1400139457675661412)")
        
        # Channel Planning - ID: 1400608607002820770
        print("üìÖ Cr√©ation du panel de planning...")
        planning_channel = guild.get_channel(1400608607002820770)
        if planning_channel:
            try:
                from planning import create_planning_panel
                await create_planning_panel(bot, guild)
                print(f"‚úÖ Panel de planning cr√©√© dans #{planning_channel.name}")
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation panel planning: {e}")
        else:
            print("‚ùå Canal de planning introuvable (ID: 1400608607002820770)")
        
        print("üéâ Cr√©ation automatique de tous les panels termin√©e!")
        print("‚úÖ Tous les syst√®mes sont maintenant op√©rationnels!")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi des messages automatiques: {e}")

@bot.event
async def on_member_join(member):
    """√âv√©nement quand un membre rejoint"""
    if str(member.guild.id) == DISCORD_GUILD_ID:
        print(f"üëã Nouveau membre: {member.name} ({member.id})")

@bot.event
async def on_member_remove(member):
    """√âv√©nement quand un membre quitte"""
    if str(member.guild.id) == DISCORD_GUILD_ID:
        print(f"üëã Membre parti: {member.name} ({member.id})")

@bot.event
async def on_member_update(before, after):
    """√âv√©nement quand un membre est mis √† jour (r√¥les, etc.)"""
    if str(after.guild.id) == DISCORD_GUILD_ID:
        # V√©rifier les changements de r√¥les
        before_roles = set(role.id for role in before.roles)
        after_roles = set(role.id for role in after.roles)
        
        added_roles = after_roles - before_roles
        removed_roles = before_roles - after_roles
        
        for role_id in added_roles:
            print(f"‚ûï R√¥le ajout√©: {after.name} -> {role_id}")
        
        for role_id in removed_roles:
            print(f"‚ûñ R√¥le retir√©: {after.name} -> {role_id}")

# =============================================================================
# COMMANDES BOT
# =============================================================================

@bot.command(name='info')
async def info(ctx):
    """Affiche les informations du bot"""
    embed = discord.Embed(
        title="ü§ñ Informations Bot Unifi√©",
        description="Bot Discord Seykoofx avec toutes les fonctionnalit√©s",
        color=0x00ff00
    )
    embed.add_field(name="Nom", value=bot.user.name, inline=True)
    embed.add_field(name="ID", value=bot.user.id, inline=True)
    embed.add_field(name="Serveurs", value=len(bot.guilds), inline=True)
    embed.add_field(name="Latence", value=f"{round(bot.latency * 1000)}ms", inline=True)
    embed.add_field(name="Serveur cible", value=DISCORD_GUILD_ID, inline=True)
    embed.add_field(name="R√¥le requis", value=REQUIRED_ROLE_ID, inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='roles')
async def roles(ctx):
    """Affiche les r√¥les du serveur"""
    guild = ctx.guild
    roles_list = []
    
    for role in guild.roles:
        if not role.managed and role.name != "@everyone":
            roles_list.append(f"‚Ä¢ {role.name} (ID: {role.id})")
    
    embed = discord.Embed(
        title="üìã R√¥les du serveur",
        description="\n".join(roles_list[:20]),  # Limiter √† 20 r√¥les
        color=0x0099ff
    )
    
    await ctx.send(embed=embed)

@bot.command(name='addrole')
@commands.has_permissions(manage_roles=True)
async def addrole(ctx, member: discord.Member, role: discord.Role):
    """Ajoute un r√¥le √† un membre"""
    try:
        await member.add_roles(role)
        await ctx.send(f"‚úÖ R√¥le {role.name} ajout√© √† {member.name}")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour ajouter ce r√¥le")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur: {e}")

@bot.command(name='removerole')
@commands.has_permissions(manage_roles=True)
async def removerole(ctx, member: discord.Member, role: discord.Role):
    """Retire un r√¥le d'un membre"""
    try:
        await member.remove_roles(role)
        await ctx.send(f"‚úÖ R√¥le {role.name} retir√© de {member.name}")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour retirer ce r√¥le")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur: {e}")

@bot.command(name='premium')
async def premium(ctx):
    """Informations sur le syst√®me Premium"""
    embed = discord.Embed(
        title="‚≠ê Syst√®me Premium",
        description="Syst√®me de r√¥les Premium pour le contenu exclusif",
        color=0xffd700
    )
    embed.add_field(name="R√¥le Premium ID", value=PREMIUM_ROLE_ID, inline=True)
    embed.add_field(name="R√¥le requis ID", value=REQUIRED_ROLE_ID, inline=True)
    embed.add_field(name="Serveur ID", value=DISCORD_GUILD_ID, inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='checkroles')
@commands.has_permissions(manage_roles=True)
async def check_roles_command(ctx, member: discord.Member = None):
    """V√©rifie les r√¥les d'un utilisateur (admin seulement)"""
    if member is None:
        member = ctx.author
    
    embed = discord.Embed(
        title="üîç Diagnostic des R√¥les",
        description=f"R√¥les de {member.mention}",
        color=0x0099ff,
        timestamp=datetime.now()
    )
    
    # R√¥les de l'utilisateur
    roles_list = []
    for role in member.roles:
        if role.name != "@everyone":
            roles_list.append(f"{role.mention} (ID: {role.id})")
    
    embed.add_field(
        name="üìã R√¥les actuels",
        value="\n".join(roles_list) if roles_list else "Aucun r√¥le",
        inline=False
    )
    
    # V√©rifier les r√¥les sp√©cifiques
    required_role = ctx.guild.get_role(int(REQUIRED_ROLE_ID))
    premium_role = ctx.guild.get_role(int(PREMIUM_ROLE_ID))
    
    embed.add_field(
        name="üéØ R√¥les requis",
        value=f"R√¥le membre: {'‚úÖ' if required_role in member.roles else '‚ùå'} ({REQUIRED_ROLE_ID})\n"
              f"R√¥le premium: {'‚úÖ' if premium_role in member.roles else '‚ùå'} ({PREMIUM_ROLE_ID})",
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='testauth')
@commands.has_permissions(manage_roles=True)
async def test_auth_command(ctx, user_id: str = None):
    """Teste l'authentification d'un utilisateur (admin seulement)"""
    if user_id is None:
        user_id = str(ctx.author.id)
    
    embed = discord.Embed(
        title="üß™ Test d'Authentification",
        description=f"Test pour l'utilisateur <@{user_id}>",
        color=0x0099ff,
        timestamp=datetime.now()
    )
    
    try:
        # V√©rifier si l'utilisateur est dans le serveur
        member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
        
        if member_response.status_code != 200:
            embed.add_field(
                name="‚ùå R√©sultat",
                value="L'utilisateur n'est pas membre du serveur",
                inline=False
            )
            await ctx.send(embed=embed)
            return
        
        # V√©rifier les r√¥les
        member_data = member_response.json()
        user_roles = member_data.get('roles', [])
        
        has_member_role = REQUIRED_ROLE_ID in user_roles
        has_premium_role = PREMIUM_ROLE_ID in user_roles
        has_access = has_member_role or has_premium_role
        
        embed.add_field(
            name="üìã R√¥les",
            value=f"R√¥le membre: {'‚úÖ' if has_member_role else '‚ùå'}\n"
                  f"R√¥le premium: {'‚úÖ' if has_premium_role else '‚ùå'}",
            inline=True
        )
        
        embed.add_field(
            name="üéØ Acc√®s",
            value=f"Acc√®s au site: {'‚úÖ' if has_access else '‚ùå'}\n"
                  f"Type d'acc√®s: {'Premium' if has_premium_role else ('Membre' if has_member_role else 'Aucun')}",
            inline=True
        )
        
        embed.add_field(
            name="üîß IDs",
            value=f"Membre: {REQUIRED_ROLE_ID}\n"
                  f"Premium: {PREMIUM_ROLE_ID}",
            inline=False
        )
        
        if has_access:
            embed.color = 0x00ff00
            embed.title = "‚úÖ Test d'Authentification - SUCC√àS"
        else:
            embed.color = 0xff0000
            embed.title = "‚ùå Test d'Authentification - √âCHEC"
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        embed.add_field(
            name="‚ùå Erreur",
            value=f"Erreur lors du test: {str(e)}",
            inline=False
        )
        await ctx.send(embed=embed)

# =============================================================================
# SYST√àME DE TICKETS (import√© depuis tickets.py)
# =============================================================================

# =============================================================================
# COMMANDES DE TICKETS (avec !)
# =============================================================================

@bot.command(name='statue')
async def statue_command(ctx):
    """Affiche le statut d'un ticket"""
    await check_ticket_status(ctx)

@bot.command(name='statue1')
async def statue1_command(ctx):
    """Met le ticket en attente"""
    await change_ticket_status_command(ctx, 1)

@bot.command(name='statue2')
async def statue2_command(ctx):
    """Met le ticket en cours"""
    await change_ticket_status_command(ctx, 2)

@bot.command(name='statue3')
async def statue3_command(ctx):
    """Met le ticket comme termin√©"""
    await change_ticket_status_command(ctx, 3)

# =============================================================================
# GESTION DU R√àGLEMENT (import√© depuis reglement.py)
# =============================================================================

@bot.command(name='reglement')
async def reglement_command(ctx):
    """Commande pour afficher le r√®glement"""
    await reglement(ctx)

@bot.command(name='update_reglement')
@commands.has_permissions(manage_messages=True)
async def update_reglement_command(ctx):
    """Commande pour mettre √† jour le r√®glement"""
    await update_reglement(ctx, bot)

@bot.command(name='clean_slash')
@commands.is_owner()
async def clean_slash_commands(ctx):
    """Nettoie toutes les commandes slash (propri√©taire uniquement)"""
    try:
        # Supprimer toutes les commandes slash
        bot.tree.clear_commands(guild=None)
        await bot.tree.sync()
        
        embed = discord.Embed(
            title="üßπ Nettoyage Termin√©",
            description="Toutes les commandes slash ont √©t√© supprim√©es.",
            color=0x00ff00,
            timestamp=datetime.now()
        )
        embed.add_field(name="Statut", value="‚úÖ Commandes slash supprim√©es", inline=True)
        embed.add_field(name="Syst√®me", value="Uniquement les commandes avec !", inline=True)
        
        await ctx.send(embed=embed)
        print("üßπ Commandes slash nettoy√©es manuellement")
        
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erreur",
            description=f"Erreur lors du nettoyage: {str(e)}",
            color=0xff0000,
            timestamp=datetime.now()
        )
        await ctx.send(embed=embed)

# =============================================================================
# COMMANDES POUR ENVOYER LES MESSAGES MANUELLEMENT
# =============================================================================

@bot.command(name='send_reglement')
@commands.has_permissions(manage_messages=True)
async def send_reglement_here(ctx):
    """Envoie le panel de r√®glement dans le canal actuel"""
    try:
        from verification import create_reglement_panel
        await create_reglement_panel(bot, ctx.guild)
        await ctx.send("‚úÖ Panel de r√®glement envoy√© avec succ√®s!")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi du panel r√®glement: {e}")

@bot.command(name='send_tickets')
@commands.has_permissions(manage_messages=True)
async def send_tickets_here(ctx):
    """Envoie le panel de tickets dans le canal actuel"""
    try:
        from tickets import create_ticket_panel
        await create_ticket_panel(bot, ctx.guild)
        await ctx.send("‚úÖ Panel de tickets envoy√© avec succ√®s!")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi du panel tickets: {e}")

@bot.command(name='send_verification')
@commands.has_permissions(manage_messages=True)
async def send_verification_here(ctx):
    """Envoie le panel de v√©rification dans le canal actuel"""
    try:
        from verification import create_verification_panel
        await create_verification_panel(bot, ctx.guild)
        await ctx.send("‚úÖ Panel de v√©rification envoy√© avec succ√®s!")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi du panel v√©rification: {e}")

@bot.command(name='send_all')
@commands.has_permissions(manage_messages=True)
async def send_all_panels(ctx):
    """Envoie tous les panels dans le canal actuel"""
    try:
        # R√®glement
        from reglement import reglement
        await reglement(ctx)
        
        # Tickets
        from tickets import create_ticket_panel
        await create_ticket_panel(bot, ctx.guild)
        
        # V√©rification
        from verification import create_verification_panel
        await create_verification_panel(bot, ctx.guild)
        
        # Planning
        embed = discord.Embed(
            title="üìÖ Syst√®me de Planning Pro",
            description="G√©rez le planning des trailers et vid√©os avec les boutons ci-dessous",
            color=0x0099ff,
            timestamp=datetime.now()
        )
        embed.add_field(
            name="üìÖ Ajouter Date",
            value="Cr√©ez une nouvelle entr√©e dans le planning",
            inline=True
        )
        embed.add_field(
            name="‚úèÔ∏è Modifier Date",
            value="Modifiez une date existante",
            inline=True
        )
        embed.add_field(
            name="üóëÔ∏è Supprimer Date",
            value="Supprimez une date du planning",
            inline=True
        )
        embed.add_field(
            name="üìã Voir Planning",
            value="Consultez le planning complet",
            inline=True
        )
        embed.set_footer(text="Seykoofx - Planning Pro")
        
        view = PlanningView()
        await ctx.send(embed=embed, view=view)
        
        # Mod√©ration
        embed = discord.Embed(
            title="üõ°Ô∏è Syst√®me de Mod√©ration",
            description="G√©rez la mod√©ration avec les boutons ci-dessous",
            color=0xff0000,
            timestamp=datetime.now()
        )
        embed.add_field(
            name="üõ°Ô∏è Kick",
            value="Expulse un utilisateur du serveur",
            inline=True
        )
        embed.add_field(
            name="üî® Ban",
            value="Bannit un utilisateur du serveur",
            inline=True
        )
        embed.add_field(
            name="‚è∞ Timeout",
            value="Timeoute un utilisateur temporairement",
            inline=True
        )
        embed.add_field(
            name="‚ûï Ajouter R√¥le",
            value="Ajoute un r√¥le √† un utilisateur",
            inline=True
        )
        embed.set_footer(text="Seykoofx - Mod√©ration")
        
        view = ModerationView()
        await ctx.send(embed=embed, view=view)
        
        await ctx.send("‚úÖ Tous les panels ont √©t√© envoy√©s avec succ√®s!")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi des panels: {e}")

@bot.command(name='check_channels')
@commands.has_permissions(manage_messages=True)
async def check_channels_command(ctx):
    """V√©rifie les canaux configur√©s dans le bot"""
    embed = discord.Embed(
        title="üîç V√©rification des Canaux",
        description="Statut des canaux configur√©s dans le bot",
        color=0x0099ff,
        timestamp=datetime.now()
    )
    
    # Canaux de tickets
    ticket_channel = ctx.guild.get_channel(1399430693217505300)
    embed.add_field(
        name="üé´ Canal Tickets",
        value=f"{'‚úÖ Trouv√©' if ticket_channel else '‚ùå Introuvable'} - ID: 1399430693217505300",
        inline=True
    )
    
    # Canaux de logs
    planning_log_channel = ctx.guild.get_channel(1400613991851491379)
    embed.add_field(
        name="üìÖ Logs Planning",
        value=f"{'‚úÖ Trouv√©' if planning_log_channel else '‚ùå Introuvable'} - ID: 1400613991851491379",
        inline=True
    )
    
    voice_log_channel = ctx.guild.get_channel(1400614430336614511)
    embed.add_field(
        name="üé§ Logs Vocal",
        value=f"{'‚úÖ Trouv√©' if voice_log_channel else '‚ùå Introuvable'} - ID: 1400614430336614511",
        inline=True
    )
    
    moderation_log_channel = ctx.guild.get_channel(1400614542538707097)
    embed.add_field(
        name="üõ°Ô∏è Logs Mod√©ration",
        value=f"{'‚úÖ Trouv√©' if moderation_log_channel else '‚ùå Introuvable'} - ID: 1400614542538707097",
        inline=True
    )
    
    # Canal de v√©rification
    verification_channel = ctx.guild.get_channel(1400139457675661412)
    embed.add_field(
        name="üîê Canal V√©rification",
        value=f"{'‚úÖ Trouv√©' if verification_channel else '‚ùå Introuvable'} - ID: 1400139457675661412",
        inline=True
    )
    
    # Canal de r√®glement
    reglement_channel = ctx.guild.get_channel(1005763703750279183)
    embed.add_field(
        name="üìú Canal R√®glement",
        value=f"{'‚úÖ Trouv√©' if reglement_channel else '‚ùå Introuvable'} - ID: 1005763703750279183",
        inline=True
    )
    
    # Canal de planning
    planning_channel = ctx.guild.get_channel(1400608607002820770)
    embed.add_field(
        name="üìÖ Canal Planning",
        value=f"{'‚úÖ Trouv√©' if planning_channel else '‚ùå Introuvable'} - ID: 1400608607002820770",
        inline=True
    )
    
    embed.add_field(
        name="üí° Solution",
        value="Utilisez `!send_all` dans le canal o√π vous voulez les messages",
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='force_send')
@commands.has_permissions(manage_messages=True)
async def force_send_messages(ctx):
    """Force l'envoi des messages dans les canaux configur√©s"""
    try:
        await send_automatic_messages()
        await ctx.send("‚úÖ Messages envoy√©s dans les canaux configur√©s!")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi: {e}")

@bot.command(name='help_messages')
async def help_messages_command(ctx):
    """Affiche l'aide pour les commandes de messages"""
    embed = discord.Embed(
        title="üìã Commandes de Messages",
        description="Commandes pour g√©rer les messages automatiques",
        color=0x0099ff
    )
    
    commands_list = [
        ("`!check_channels`", "V√©rifie les canaux configur√©s"),
        ("`!force_send`", "Force l'envoi des messages dans les canaux configur√©s"),
        ("`!send_all`", "Envoie tous les panels dans le canal actuel"),
        ("`!send_reglement`", "Envoie le r√®glement dans le canal actuel"),
        ("`!send_tickets`", "Envoie le panel de tickets dans le canal actuel"),
        ("`!send_verification`", "Envoie le panel de v√©rification dans le canal actuel"),
        ("`!send_planning`", "Envoie le panel de planning dans le canal actuel"),
        ("`!clear`", "Supprime les derniers messages du canal"),
        ("`!annonce`", "Envoie une annonce avec banni√®re"),
        ("`!annonce_titre`", "Envoie une annonce avec titre personnalis√©")
    ]
    
    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)
    
    embed.add_field(
        name="üìä Canaux Configur√©s",
        value="‚Ä¢ Tickets: 1399430693217505300\n‚Ä¢ R√®glement: 1005763703750279183\n‚Ä¢ V√©rification: 1400139457675661412\n‚Ä¢ Planning: 1400608607002820770\n‚Ä¢ Logs Planning: 1400613991851491379\n‚Ä¢ Logs Vocal: 1400614430336614511\n‚Ä¢ Logs Mod√©ration: 1400614542538707097",
        inline=False
    )
    
    # Ajouter les commandes de planning
    planning_commands = [
        ("`!planning`", "Affiche le planning complet"),
        ("`!addplanning`", "Ajoute une date au planning"),
        ("`!editplanning`", "Modifie une date du planning"),
        ("`!deleteplanning`", "Supprime une date du planning")
    ]
    
    planning_text = "\n".join([f"‚Ä¢ {cmd}: {desc}" for cmd, desc in planning_commands])
    embed.add_field(
        name="üìÖ Commandes de Planning",
        value=planning_text,
        inline=False
    )
    
    # Ajouter les commandes de mod√©ration
    moderation_commands = [
        ("`!moderation`", "Affiche le panel de mod√©ration"),
        ("`!kick`", "Kick un utilisateur"),
        ("`!ban`", "Ban un utilisateur"),
        ("`!timeout`", "Timeout un utilisateur"),
        ("`!addrole`", "Ajoute un r√¥le √† un utilisateur")
    ]
    
    moderation_text = "\n".join([f"‚Ä¢ {cmd}: {desc}" for cmd, desc in moderation_commands])
    embed.add_field(
        name="üõ°Ô∏è Commandes de Mod√©ration",
        value=moderation_text,
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='test_tickets')
@commands.has_permissions(manage_messages=True)
async def test_tickets_command(ctx):
    """Teste le syst√®me de tickets"""
    embed = discord.Embed(
        title="üé´ Test du Syst√®me de Tickets",
        description="V√©rification du syst√®me de tickets",
        color=0x0099ff,
        timestamp=datetime.now()
    )
    
    # V√©rifier le canal de tickets
    ticket_channel = ctx.guild.get_channel(1399430693217505300)
    
    if ticket_channel:
        embed.add_field(name="‚úÖ Canal Tickets", value=f"#{ticket_channel.name}", inline=True)
    else:
        embed.add_field(name="‚ùå Canal Tickets", value="Introuvable", inline=True)
    
    await ctx.send(embed=embed)

# =============================================================================
# COMMANDES DE PLANNING
# =============================================================================

@bot.command(name='planning')
async def planning_command(ctx):
    """Affiche le planning"""
    await ctx.send("üìÖ Utilisez les boutons dans le canal planning pour g√©rer le planning.")

@bot.command(name='send_planning')
@commands.has_permissions(manage_messages=True)
async def send_planning_here(ctx):
    """Envoie le panel de planning dans le canal actuel"""
    try:
        from planning import create_planning_panel
        await create_planning_panel(bot, ctx.guild)
        await ctx.send("‚úÖ Panel de planning envoy√© !")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur envoi panel planning: {e}")

# =============================================================================
# COMMANDES DE MOD√âRATION
# =============================================================================

@bot.command(name='moderation')
async def moderation_command(ctx):
    """Affiche le panel de mod√©ration"""
    await ctx.send("üõ°Ô∏è Syst√®me de mod√©ration disponible via les permissions Discord.")

@bot.command(name='kick')
@commands.has_permissions(kick_members=True)
async def kick_command(ctx):
    """Affiche le modal pour kick un utilisateur"""
    await show_kick_modal(ctx)

@bot.command(name='ban')
@commands.has_permissions(ban_members=True)
async def ban_command(ctx):
    """Affiche le modal pour ban un utilisateur"""
    await show_ban_modal(ctx)

@bot.command(name='timeout')
@commands.has_permissions(moderate_members=True)
async def timeout_command(ctx):
    """Affiche le modal pour timeout un utilisateur"""
    await show_timeout_modal(ctx)



# =============================================================================
# GESTION D'ERREURS
# =============================================================================

@bot.event
async def on_command_error(ctx, error):
    """Gestion des erreurs de commandes"""
    try:
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("‚ùå Vous n'avez pas les permissions pour cette commande")
        elif isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("‚ùå Argument manquant. Utilisez `!help` pour voir la syntaxe")
        elif isinstance(error, commands.BadArgument):
            await ctx.send("‚ùå Argument invalide")
        elif isinstance(error, discord.NotFound):
            # Canal ou message introuvable, on ignore silencieusement
            pass
        else:
            await ctx.send(f"‚ùå Erreur: {error}")
    except discord.NotFound:
        # Si le canal n'existe plus, on ne peut rien faire
        pass
    except Exception as e:
        # En cas d'erreur dans le gestionnaire d'erreur lui-m√™me, on log mais on ne fait rien
        print(f"Erreur dans le gestionnaire d'erreur: {e}")

# =============================================================================
# API FLASK (pour l'int√©gration web)
# =============================================================================

@app.route('/api/auth/verify', methods=['POST'])
def verify_discord_user():
    """V√©rifie un utilisateur Discord et g√©n√®re un token"""
    data = request.get_json()
    
    if not data or 'code' not in data:
        return jsonify({'error': 'Code Discord manquant'}), 400
    
    code = data['code']
    
    # √âchange du code contre un token d'acc√®s
    token_data = {
        'client_id': '1399410242617475132',
        'client_secret': os.getenv('DISCORD_CLIENT_SECRET', 'VOTRE_CLIENT_SECRET'),
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': 'https://seykoofx-shop.vercel.app/auth/callback'
    }
    
    # Essayer d'abord avec l'URL de production
    token_response = requests.post('https://discord.com/api/oauth2/token', data=token_data)
    
    # Si √ßa √©choue, essayer avec l'URL de d√©veloppement
    if token_response.status_code != 200:
        token_data['redirect_uri'] = 'http://localhost:3000/auth/callback'
        token_response = requests.post('https://discord.com/api/oauth2/token', data=token_data)
    
    if token_response.status_code != 200:
        print(f"Erreur √©change token: {token_response.text}")
        return jsonify({'error': 'Erreur lors de l\'√©change du code'}), 400
    
    token_data = token_response.json()
    access_token = token_data['access_token']
    
    # R√©cup√©ration des informations utilisateur depuis Discord
    headers = {'Authorization': f'Bearer {access_token}'}
    user_response = requests.get('https://discord.com/api/users/@me', headers=headers)
    
    if user_response.status_code != 200:
        return jsonify({'error': 'Token Discord invalide'}), 401
    
    user_data = user_response.json()
    user_id = user_data['id']
    username = user_data['username']
    
    print(f"V√©rification de l'utilisateur Discord: {username} (ID: {user_id})")
    
    # V√©rification si l'utilisateur est dans le serveur
    member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
    
    if member_response.status_code != 200:
        print(f"Utilisateur {username} n'est pas membre du serveur")
        return jsonify({
            'error': 'Vous n\'√™tes pas membre du serveur Discord Seykoofx',
            'discord_invite': 'https://discord.gg/2Fg7mW7wKg',
            'message': 'Rejoignez notre serveur Discord pour acc√©der au site'
        }), 403
    
    print(f"Utilisateur {username} est membre du serveur")
    
    # V√©rification si l'utilisateur a acc√®s au site
    has_access = check_user_has_access(user_id)
    
    if not has_access:
        print(f"Utilisateur {username} n'a pas acc√®s au site (r√¥le membre OU premium)")
        return jsonify({
            'error': 'Vous n\'avez pas les permissions n√©cessaires pour acc√©der √† ce site',
            'discord_invite': 'https://discord.gg/2Fg7mW7wKg',
            'message': 'Contactez un administrateur pour obtenir les permissions n√©cessaires'
        }), 403
    
    print(f"Utilisateur {username} a acc√®s au site - authentification r√©ussie")
    
    # R√©cup√©rer les informations d√©taill√©es sur les r√¥les
    member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
    member_data = member_response.json()
    user_roles = member_data.get('roles', [])
    
    # D√©terminer le type d'acc√®s
    has_member_role = REQUIRED_ROLE_ID in user_roles
    has_premium_role = PREMIUM_ROLE_ID in user_roles
    
    access_type = "premium" if has_premium_role else "member"
    
    # G√©n√©ration du token API
    api_token = generate_token(user_id, username)
    
    return jsonify({
        'success': True,
        'token': api_token,
        'user': {
            'id': user_id,
            'username': username,
            'avatar': user_data.get('avatar'),
            'email': user_data.get('email'),
            'roles': user_roles,
            'has_member_role': has_member_role,
            'has_premium_role': has_premium_role,
            'access_type': access_type
        }
    })

@app.route('/api/user/info', methods=['GET'])
def get_user_info():
    """R√©cup√®re les informations de l'utilisateur"""
    token = request.headers.get('Authorization')
    if not token or not token.startswith('Bearer '):
        return jsonify({'error': 'Token manquant'}), 401
    
    token = token.split(' ')[1]
    payload = verify_token(token)
    if not payload:
        return jsonify({'error': 'Token invalide'}), 401
    
    user_id = payload['user_id']
    
    # R√©cup√©ration des informations du membre
    member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
    
    if member_response.status_code != 200:
        return jsonify({'error': 'Membre non trouv√©'}), 404
    
    member_data = member_response.json()
    
    # R√©cup√©ration des r√¥les
    roles = []
    for role_id in member_data.get('roles', []):
        role_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/roles/{role_id}')
        if role_response.status_code == 200:
            role_data = role_response.json()
            roles.append({
                'id': role_data['id'],
                'name': role_data['name'],
                'color': role_data['color']
            })
    
    return jsonify({
        'user_id': user_id,
        'username': payload['username'],
        'nickname': member_data.get('nick'),
        'joined_at': member_data.get('joined_at'),
        'roles': roles
    })

@app.route('/api/user/premium-status', methods=['GET'])
def get_premium_status():
    """V√©rifie le statut premium de l'utilisateur"""
    token = request.headers.get('Authorization')
    if not token or not token.startswith('Bearer '):
        return jsonify({'error': 'Token manquant'}), 401
    
    token = token.split(' ')[1]
    payload = verify_token(token)
    if not payload:
        return jsonify({'error': 'Token invalide'}), 401
    
    user_id = payload['user_id']
    
    try:
        # V√©rifier les r√¥les de l'utilisateur
        member_response = discord_api_request(f'/guilds/{DISCORD_GUILD_ID}/members/{user_id}')
        
        if member_response.status_code != 200:
            return jsonify({'error': 'Membre non trouv√©'}), 404
        
        member_data = member_response.json()
        user_roles = member_data.get('roles', [])
        
        # V√©rifier les r√¥les sp√©cifiques
        has_member_role = REQUIRED_ROLE_ID in user_roles
        has_premium_role = PREMIUM_ROLE_ID in user_roles
        
        return jsonify({
            'success': True,
            'has_member_role': has_member_role,
            'has_premium_role': has_premium_role,
            'has_access': has_member_role or has_premium_role,
            'access_type': 'premium' if has_premium_role else ('member' if has_member_role else 'none'),
            'roles': user_roles
        })
        
    except Exception as e:
        print(f"Erreur v√©rification statut premium: {e}")
        return jsonify({'error': 'Erreur lors de la v√©rification du statut'}), 500

@app.route('/api/user/has-role', methods=['POST'])
def check_user_role():
    """V√©rifie si un utilisateur a un r√¥le sp√©cifique"""
    token = request.headers.get('Authorization')
    if not token or not token.startswith('Bearer '):
        return jsonify({'error': 'Token manquant'}), 401
    
    token = token.split(' ')[1]
    payload = verify_token(token)
    if not payload:
        return jsonify({'error': 'Token invalide'}), 401
    
    user_id = payload['user_id']
    data = request.get_json()
    role_id = data.get('role_id')
    
    if not role_id:
        return jsonify({'error': 'ID du r√¥le manquant'}), 400
    
    # V√©rifier si l'utilisateur a le r√¥le
    has_role = check_user_has_role(user_id, role_id)
    
    return jsonify({
        'has_role': has_role,
        'user_id': user_id,
        'role_id': role_id,
        'message': 'R√¥le v√©rifi√© avec succ√®s'
    }), 200

@app.route('/api/health', methods=['GET'])
def health_check():
    """V√©rification de la sant√© de l'API"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'bot_connected': bool(DISCORD_TOKEN != 'VOTRE_TOKEN_BOT'),
        'guild_id': DISCORD_GUILD_ID,
        'required_role': REQUIRED_ROLE_ID,
        'premium_role': PREMIUM_ROLE_ID
    })

# =============================================================================
# D√âMARRAGE DU BOT ET DE L'API
# =============================================================================

def run_flask():
    """D√©marre le serveur Flask dans un thread s√©par√©"""
    port = int(os.environ.get('PORT', 5001))
    app.run(debug=False, host='0.0.0.0', port=port)

def start_api():
    """D√©marre l'API Flask"""
    print("üöÄ D√©marrage de l'API Flask...")
    run_flask()

if __name__ == '__main__':
    print("üöÄ D√©marrage du bot Discord unifi√©...")
    print(f"üì° Serveur Discord: {DISCORD_GUILD_ID}")
    print(f"üîë R√¥le requis: {REQUIRED_ROLE_ID}")
    print(f"üëë R√¥le Premium: {PREMIUM_ROLE_ID}")
    
    # D√©marrer l'API Flask dans un thread s√©par√©
    api_thread = Thread(target=start_api)
    api_thread.daemon = True
    api_thread.start()
    
    # D√©marrer le bot Discord
    try:
        bot.run(DISCORD_TOKEN)
    except discord.LoginFailure:
        print("‚ùå Token Discord invalide")
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage bot: {e}") 